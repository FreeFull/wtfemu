#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/* automatically generated by rust-bindgen 0.59.2 */
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const MANU_INTEL: u32 = 0;
pub const MANU_AMD: u32 = 1;
pub const MANU_CYRIX: u32 = 2;
pub const MANU_IDT: u32 = 3;
pub const MANU_NEC: u32 = 4;
pub const CPU_SUPPORTS_DYNAREC: u32 = 1;
pub const CPU_REQUIRES_DYNAREC: u32 = 2;
pub const CPU_ALTERNATE_XTAL: u32 = 4;
pub const CPU_FIXED_MULTIPLIER: u32 = 8;
pub const LOOKUP_INV: i32 = -1;
pub const C_FLAG: u32 = 1;
pub const P_FLAG: u32 = 4;
pub const A_FLAG: u32 = 16;
pub const Z_FLAG: u32 = 64;
pub const N_FLAG: u32 = 128;
pub const T_FLAG: u32 = 256;
pub const I_FLAG: u32 = 512;
pub const D_FLAG: u32 = 1024;
pub const V_FLAG: u32 = 2048;
pub const NT_FLAG: u32 = 16384;
pub const RF_FLAG: u32 = 1;
pub const VM_FLAG: u32 = 2;
pub const VIF_FLAG: u32 = 8;
pub const VIP_FLAG: u32 = 16;
pub const VID_FLAG: u32 = 32;
pub const WP_FLAG: u32 = 65536;
pub const CR4_VME: u32 = 1;
pub const CR4_PVI: u32 = 2;
pub const CR4_PSE: u32 = 16;
pub const CR4_PAE: u32 = 32;
pub const CPU_STATUS_USE32: u32 = 1;
pub const CPU_STATUS_STACK32: u32 = 2;
pub const CPU_STATUS_PMODE: u32 = 4;
pub const CPU_STATUS_V86: u32 = 8;
pub const CPU_STATUS_SMM: u32 = 16;
pub const CPU_STATUS_FLAGS: u32 = 65535;
pub const CPU_STATUS_NOTFLATDS: u32 = 65536;
pub const CPU_STATUS_NOTFLATSS: u32 = 131072;
pub const CPU_STATUS_MASK: u32 = 4294901760;
pub const CR4_TSD: u32 = 4;
pub const CR4_DE: u32 = 8;
pub const CR4_MCE: u32 = 64;
pub const CR4_PCE: u32 = 256;
pub const CR4_OSFXSR: u32 = 512;
pub const CPU_FEATURE_RDTSC: u32 = 1;
pub const CPU_FEATURE_MSR: u32 = 2;
pub const CPU_FEATURE_MMX: u32 = 4;
pub const CPU_FEATURE_CR4: u32 = 8;
pub const CPU_FEATURE_VME: u32 = 16;
pub const CPU_FEATURE_CX8: u32 = 32;
pub const CPU_FEATURE_3DNOW: u32 = 64;
pub const FPU_CW_Reserved_Bits: u32 = 57536;
pub const SMHR_VALID: u32 = 1;
pub const SMHR_ADDR_MASK: u32 = 4294967292;
pub const FPU_NONE: libc::c_uint = 0;
pub const FPU_8087: libc::c_uint = 1;
pub const FPU_287: libc::c_uint = 2;
pub const FPU_287XL: libc::c_uint = 3;
pub const FPU_387: libc::c_uint = 4;
pub const FPU_487SX: libc::c_uint = 5;
pub const FPU_INTERNAL: libc::c_uint = 6;
pub type _bindgen_ty_1 = libc::c_uint;
pub const CPU_8088: libc::c_uint = 1;
pub const CPU_8086: libc::c_uint = 2;
pub const CPU_286: libc::c_uint = 3;
pub const CPU_386SX: libc::c_uint = 4;
pub const CPU_IBM386SLC: libc::c_uint = 5;
pub const CPU_IBM486SLC: libc::c_uint = 6;
pub const CPU_386DX: libc::c_uint = 7;
pub const CPU_IBM486BL: libc::c_uint = 8;
pub const CPU_RAPIDCAD: libc::c_uint = 9;
pub const CPU_486SLC: libc::c_uint = 10;
pub const CPU_486DLC: libc::c_uint = 11;
pub const CPU_i486SX: libc::c_uint = 12;
pub const CPU_Am486SX: libc::c_uint = 13;
pub const CPU_Cx486S: libc::c_uint = 14;
pub const CPU_i486DX: libc::c_uint = 15;
pub const CPU_Am486DX: libc::c_uint = 16;
pub const CPU_Am486DXL: libc::c_uint = 17;
pub const CPU_Cx486DX: libc::c_uint = 18;
pub const CPU_STPC: libc::c_uint = 19;
pub const CPU_i486SX_SLENH: libc::c_uint = 20;
pub const CPU_i486DX_SLENH: libc::c_uint = 21;
pub const CPU_ENH_Am486DX: libc::c_uint = 22;
pub const CPU_Cx5x86: libc::c_uint = 23;
pub const CPU_P24T: libc::c_uint = 24;
pub const CPU_WINCHIP: libc::c_uint = 25;
pub const CPU_WINCHIP2: libc::c_uint = 26;
pub const CPU_PENTIUM: libc::c_uint = 27;
pub const CPU_PENTIUMMMX: libc::c_uint = 28;
pub const CPU_Cx6x86: libc::c_uint = 29;
pub const CPU_Cx6x86MX: libc::c_uint = 30;
pub const CPU_Cx6x86L: libc::c_uint = 31;
pub const CPU_CxGX1: libc::c_uint = 32;
pub const CPU_K5: libc::c_uint = 33;
pub const CPU_5K86: libc::c_uint = 34;
pub const CPU_K6: libc::c_uint = 35;
pub const CPU_K6_2: libc::c_uint = 36;
pub const CPU_K6_2C: libc::c_uint = 37;
pub const CPU_K6_3: libc::c_uint = 38;
pub const CPU_K6_2P: libc::c_uint = 39;
pub const CPU_K6_3P: libc::c_uint = 40;
pub const CPU_CYRIX3S: libc::c_uint = 41;
pub const CPU_PENTIUMPRO: libc::c_uint = 42;
pub const CPU_PENTIUM2: libc::c_uint = 43;
pub const CPU_PENTIUM2D: libc::c_uint = 44;
pub type _bindgen_ty_2 = libc::c_uint;
pub const CPU_PKG_8088: libc::c_uint = 1;
pub const CPU_PKG_8088_EUROPC: libc::c_uint = 2;
pub const CPU_PKG_8086: libc::c_uint = 4;
pub const CPU_PKG_286: libc::c_uint = 8;
pub const CPU_PKG_386SX: libc::c_uint = 16;
pub const CPU_PKG_386DX: libc::c_uint = 32;
pub const CPU_PKG_M6117: libc::c_uint = 64;
pub const CPU_PKG_386SLC_IBM: libc::c_uint = 128;
pub const CPU_PKG_486SLC: libc::c_uint = 256;
pub const CPU_PKG_486SLC_IBM: libc::c_uint = 512;
pub const CPU_PKG_486BL: libc::c_uint = 1024;
pub const CPU_PKG_486DLC: libc::c_uint = 2048;
pub const CPU_PKG_SOCKET1: libc::c_uint = 4096;
pub const CPU_PKG_SOCKET3: libc::c_uint = 8192;
pub const CPU_PKG_SOCKET3_PC330: libc::c_uint = 16384;
pub const CPU_PKG_STPC: libc::c_uint = 32768;
pub const CPU_PKG_SOCKET4: libc::c_uint = 65536;
pub const CPU_PKG_SOCKET5_7: libc::c_uint = 131072;
pub const CPU_PKG_SOCKET8: libc::c_uint = 262144;
pub const CPU_PKG_SLOT1: libc::c_uint = 524288;
pub const CPU_PKG_SLOT2: libc::c_uint = 1048576;
pub const CPU_PKG_SOCKET370: libc::c_uint = 2097152;
pub const CPU_PKG_EBGA368: libc::c_uint = 4194304;
pub type _bindgen_ty_3 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPU {
    pub name: *const libc::c_char,
    pub internal_name: *const libc::c_char,
    pub type_: libc::c_int,
}

#[repr(C)]
pub struct CPU {
    pub name: *const libc::c_char,
    pub cpu_type: u64,
    pub fpus: *const FPU,
    pub rspeed: libc::c_int,
    pub multi: f64,
    pub voltage: u16,
    pub edx_reset: u32,
    pub cpuid_model: u32,
    pub cyrix_id: u16,
    pub cpu_flags: u8,
    pub mem_read_cycles: i8,
    pub mem_write_cycles: i8,
    pub cache_read_cycles: i8,
    pub cache_write_cycles: i8,
    pub atclk_div: i8,
}

#[repr(C)]
pub struct cpu_family_t {
    pub package: u32,
    pub manufacturer: *const libc::c_char,
    pub name: *const libc::c_char,
    pub internal_name: *const libc::c_char,
    pub cpus: *const CPU,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_legacy_table_t {
    pub family: *const libc::c_char,
    pub rspeed: libc::c_int,
    pub multi: f64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_legacy_machine_t {
    pub machine: *const libc::c_char,
    pub tables: *mut *const cpu_legacy_table_t,
}

#[repr(C)]
pub struct x86reg {
    pub l: __BindgenUnionField<u32>,
    pub w: __BindgenUnionField<u16>,
    pub b: __BindgenUnionField<x86reg__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct x86reg__bindgen_ty_1 {
    pub l: u8,
    pub h: u8,
}

#[repr(C)]
pub struct x86seg {
    pub base: u32,
    pub limit: u32,
    pub access: u8,
    pub ar_high: u8,
    pub seg: u16,
    pub limit_low: u32,
    pub limit_high: u32,
    pub checked: libc::c_int,
}

#[repr(C)]
pub struct MMX_REG {
    pub q: __BindgenUnionField<u64>,
    pub sq: __BindgenUnionField<i64>,
    pub l: __BindgenUnionField<[u32; 2usize]>,
    pub sl: __BindgenUnionField<[i32; 2usize]>,
    pub w: __BindgenUnionField<[u16; 4usize]>,
    pub sw: __BindgenUnionField<[i16; 4usize]>,
    pub b: __BindgenUnionField<[u8; 8usize]>,
    pub sb: __BindgenUnionField<[i8; 8usize]>,
    pub f: __BindgenUnionField<[f32; 2usize]>,
    pub bindgen_union_field: u64,
}

#[repr(C)]
pub struct msr_t {
    pub tr1: u32,
    pub tr12: u32,
    pub cesr: u32,
    pub apic_base: u64,
    pub ecx79: u64,
    pub ecx83: u64,
    pub ecx8x: [u64; 4usize],
    pub ia32_pmc: [u64; 8usize],
    pub mtrr_cap: u64,
    pub fcr: u32,
    pub fcr2: u64,
    pub fcr3: u64,
    pub ecx116: u64,
    pub ecx11x: [u64; 4usize],
    pub ecx11e: u64,
    pub sysenter_cs: u16,
    pub sysenter_esp: u32,
    pub sysenter_eip: u32,
    pub mcg_ctl: u64,
    pub ecx186: u64,
    pub ecx187: u64,
    pub ecx1e0: u64,
    pub mtrr_physbase: [u64; 8usize],
    pub mtrr_physmask: [u64; 8usize],
    pub mtrr_fix64k_8000: u64,
    pub mtrr_fix16k_8000: u64,
    pub mtrr_fix16k_a000: u64,
    pub mtrr_fix4k: [u64; 8usize],
    pub pat: u64,
    pub mtrr_deftype: u64,
    pub mca_ctl: [u64; 5usize],
    pub ecx570: u64,
    pub ibm_por: u64,
    pub ibm_crcr: u64,
    pub ibm_por2: u64,
    pub ecx1002ff: u64,
    pub amd_efer: u64,
    pub star: u64,
    pub amd_whcr: u64,
    pub amd_uwccr: u64,
    pub amd_epmr: u64,
    pub amd_psor: u64,
    pub amd_pfir: u64,
    pub amd_l2aar: u64,
    pub ecxf0f00250: u64,
    pub ecxf0f00258: u64,
    pub ecxf0f00259: u64,
}

#[repr(C)]
pub struct cpu_state_t {
    pub regs: [x86reg; 8usize],
    pub tag: [u8; 8usize],
    pub ea_seg: *mut x86seg,
    pub eaaddr: u32,
    pub flags_op: libc::c_int,
    pub flags_res: u32,
    pub flags_op1: u32,
    pub flags_op2: u32,
    pub pc: u32,
    pub oldpc: u32,
    pub op32: u32,
    pub TOP: libc::c_int,
    pub rm_data: cpu_state_t__bindgen_ty_1,
    pub ssegs: u8,
    pub ismmx: u8,
    pub abrt: u8,
    pub _smi_line: u8,
    pub _cycles: libc::c_int,
    pub _in_smm: libc::c_int,
    pub npxs: u16,
    pub npxc: u16,
    pub ST: [f64; 8usize],
    pub MM_w4: [u16; 8usize],
    pub MM: [MMX_REG; 8usize],
    pub old_npxc: u16,
    pub new_npxc: u16,
    pub seg_cs: x86seg,
    pub seg_ds: x86seg,
    pub seg_es: x86seg,
    pub seg_ss: x86seg,
    pub seg_fs: x86seg,
    pub seg_gs: x86seg,
    pub CR0: cpu_state_t__bindgen_ty_2,
    pub flags: u16,
    pub eflags: u16,
    pub _smbase: u32,
}
#[repr(C)]
pub struct cpu_state_t__bindgen_ty_1 {
    pub rm_mod_reg: __BindgenUnionField<cpu_state_t__bindgen_ty_1__bindgen_ty_1>,
    pub rm_mod_reg_data: __BindgenUnionField<i32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct cpu_state_t__bindgen_ty_1__bindgen_ty_1 {
    pub rm: i8,
    pub mod_: i8,
    pub reg: i8,
}

#[repr(C)]
pub struct cpu_state_t__bindgen_ty_2 {
    pub l: __BindgenUnionField<u32>,
    pub w: __BindgenUnionField<u16>,
    pub bindgen_union_field: u32,
}

extern "C" {
    pub static mut cpu_state: cpu_state_t;
}
extern "C" {
    pub static mut cpu_families: [cpu_family_t; 0usize];
}
extern "C" {
    pub static mut cpu_legacy_table: [cpu_legacy_machine_t; 0usize];
}
extern "C" {
    pub static mut cpu_f: *mut cpu_family_t;
}
extern "C" {
    pub static mut cpu_s: *mut CPU;
}
extern "C" {
    pub static mut cpu_override: libc::c_int;
}
extern "C" {
    pub static mut cpu_isintel: libc::c_int;
}
extern "C" {
    pub static mut cpu_iscyrix: libc::c_int;
}
extern "C" {
    pub static mut cpu_16bitbus: libc::c_int;
}
extern "C" {
    pub static mut cpu_64bitbus: libc::c_int;
}
extern "C" {
    pub static mut cpu_busspeed: libc::c_int;
}
extern "C" {
    pub static mut cpu_pci_speed: libc::c_int;
}
extern "C" {
    pub static mut cpu_multi: libc::c_int;
}
extern "C" {
    pub static mut cpu_dmulti: f64;
}
extern "C" {
    pub static mut fpu_multi: f64;
}
extern "C" {
    pub static mut cpu_cyrix_alignment: libc::c_int;
}
extern "C" {
    pub static mut is8086: libc::c_int;
}
extern "C" {
    pub static mut is286: libc::c_int;
}
extern "C" {
    pub static mut is386: libc::c_int;
}
extern "C" {
    pub static mut is486: libc::c_int;
}
extern "C" {
    pub static mut is_am486: libc::c_int;
}
extern "C" {
    pub static mut is_am486dxl: libc::c_int;
}
extern "C" {
    pub static mut is_pentium: libc::c_int;
}
extern "C" {
    pub static mut is_k5: libc::c_int;
}
extern "C" {
    pub static mut is_k6: libc::c_int;
}
extern "C" {
    pub static mut is_p6: libc::c_int;
}
extern "C" {
    pub static mut is_cxsmm: libc::c_int;
}
extern "C" {
    pub static mut hascache: libc::c_int;
}
extern "C" {
    pub static mut isibm486: libc::c_int;
}
extern "C" {
    pub static mut is_rapidcad: libc::c_int;
}
extern "C" {
    pub static mut hasfpu: libc::c_int;
}
extern "C" {
    pub static mut cpu_features: u32;
}
extern "C" {
    pub static mut smi_latched: libc::c_int;
}
extern "C" {
    pub static mut smm_in_hlt: libc::c_int;
}
extern "C" {
    pub static mut smi_block: libc::c_int;
}
extern "C" {
    pub static mut cpu_cur_status: u32;
}
extern "C" {
    pub static mut cpu_CR4_mask: u64;
}
extern "C" {
    pub static mut tsc: u64;
}
extern "C" {
    pub static mut msr: msr_t;
}
extern "C" {
    pub static mut opcode: u8;
}
extern "C" {
    pub static mut cgate16: libc::c_int;
}
extern "C" {
    pub static mut cpl_override: libc::c_int;
}
extern "C" {
    pub static mut CPUID: libc::c_int;
}
extern "C" {
    pub static mut xt_cpu_multi: u64;
}
extern "C" {
    pub static mut isa_cycles: libc::c_int;
}
extern "C" {
    pub static mut cpu_inited: libc::c_int;
}
extern "C" {
    pub static mut oldds: u32;
}
extern "C" {
    pub static mut oldss: u32;
}
extern "C" {
    pub static mut olddslimit: u32;
}
extern "C" {
    pub static mut oldsslimit: u32;
}
extern "C" {
    pub static mut olddslimitw: u32;
}
extern "C" {
    pub static mut oldsslimitw: u32;
}
extern "C" {
    pub static mut pccache: u32;
}
extern "C" {
    pub static mut pccache2: *mut u8;
}
extern "C" {
    pub static mut bus_timing: f64;
}
extern "C" {
    pub static mut isa_timing: f64;
}
extern "C" {
    pub static mut pci_timing: f64;
}
extern "C" {
    pub static mut agp_timing: f64;
}
extern "C" {
    pub static mut pmc: [u64; 2usize];
}
extern "C" {
    pub static mut temp_seg_data: [u16; 4usize];
}
extern "C" {
    pub static mut cs_msr: u16;
}
extern "C" {
    pub static mut esp_msr: u32;
}
extern "C" {
    pub static mut eip_msr: u32;
}
extern "C" {
    pub static mut amd_efer: u64;
}
extern "C" {
    pub static mut star: u64;
}
extern "C" {
    pub static mut cr2: u32;
}
extern "C" {
    pub static mut cr3: u32;
}
extern "C" {
    pub static mut cr4: u32;
}
extern "C" {
    pub static mut dr: [u32; 8usize];
}
extern "C" {
    pub static mut _tr: [u32; 8usize];
}
extern "C" {
    pub static mut cache_index: u32;
}
extern "C" {
    pub static mut _cache: [u8; 2048usize];
}
extern "C" {
    pub static mut gdt: x86seg;
}
extern "C" {
    pub static mut ldt: x86seg;
}
extern "C" {
    pub static mut idt: x86seg;
}
extern "C" {
    pub static mut tr: x86seg;
}
extern "C" {
    pub static mut _oldds: x86seg;
}
extern "C" {
    pub static mut cpu_cycles_read: libc::c_int;
}
extern "C" {
    pub static mut cpu_cycles_read_l: libc::c_int;
}
extern "C" {
    pub static mut cpu_cycles_write: libc::c_int;
}
extern "C" {
    pub static mut cpu_cycles_write_l: libc::c_int;
}
extern "C" {
    pub static mut cpu_prefetch_cycles: libc::c_int;
}
extern "C" {
    pub static mut cpu_prefetch_width: libc::c_int;
}
extern "C" {
    pub static mut cpu_mem_prefetch_cycles: libc::c_int;
}
extern "C" {
    pub static mut cpu_rom_prefetch_cycles: libc::c_int;
}
extern "C" {
    pub static mut cpu_waitstates: libc::c_int;
}
extern "C" {
    pub static mut cpu_cache_int_enabled: libc::c_int;
}
extern "C" {
    pub static mut cpu_cache_ext_enabled: libc::c_int;
}
extern "C" {
    pub static mut cpu_isa_speed: libc::c_int;
}
extern "C" {
    pub static mut cpu_agp_speed: libc::c_int;
}
extern "C" {
    pub static mut timing_rr: libc::c_int;
}
extern "C" {
    pub static mut timing_mr: libc::c_int;
}
extern "C" {
    pub static mut timing_mrl: libc::c_int;
}
extern "C" {
    pub static mut timing_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_rml: libc::c_int;
}
extern "C" {
    pub static mut timing_mm: libc::c_int;
}
extern "C" {
    pub static mut timing_mml: libc::c_int;
}
extern "C" {
    pub static mut timing_bt: libc::c_int;
}
extern "C" {
    pub static mut timing_bnt: libc::c_int;
}
extern "C" {
    pub static mut timing_int: libc::c_int;
}
extern "C" {
    pub static mut timing_int_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_int_v86: libc::c_int;
}
extern "C" {
    pub static mut timing_int_pm: libc::c_int;
}
extern "C" {
    pub static mut timing_int_pm_outer: libc::c_int;
}
extern "C" {
    pub static mut timing_iret_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_iret_v86: libc::c_int;
}
extern "C" {
    pub static mut timing_iret_pm: libc::c_int;
}
extern "C" {
    pub static mut timing_iret_pm_outer: libc::c_int;
}
extern "C" {
    pub static mut timing_call_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_call_pm: libc::c_int;
}
extern "C" {
    pub static mut timing_call_pm_gate: libc::c_int;
}
extern "C" {
    pub static mut timing_call_pm_gate_inner: libc::c_int;
}
extern "C" {
    pub static mut timing_retf_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_retf_pm: libc::c_int;
}
extern "C" {
    pub static mut timing_retf_pm_outer: libc::c_int;
}
extern "C" {
    pub static mut timing_jmp_rm: libc::c_int;
}
extern "C" {
    pub static mut timing_jmp_pm: libc::c_int;
}
extern "C" {
    pub static mut timing_jmp_pm_gate: libc::c_int;
}
extern "C" {
    pub static mut timing_misaligned: libc::c_int;
}
extern "C" {
    pub static mut in_sys: libc::c_int;
}
extern "C" {
    pub static mut unmask_a20_in_smm: libc::c_int;
}
extern "C" {
    pub static mut cycles_main: libc::c_int;
}
extern "C" {
    pub static mut old_rammask: u32;
}
extern "C" {
    pub static mut pic_pending: libc::c_int;
}
extern "C" {
    pub static mut is_vpc: libc::c_int;
}
extern "C" {
    pub static mut soft_reset_mask: libc::c_int;
}
extern "C" {
    pub static mut alt_access: libc::c_int;
}
extern "C" {
    pub static mut cpu_end_block_after_ins: libc::c_int;
}
extern "C" {
    pub static mut cpu_fast_off_count: u16;
}
extern "C" {
    pub static mut cpu_fast_off_val: u16;
}
extern "C" {
    pub static mut cpu_fast_off_flags: u32;
}
extern "C" {
    pub fn cpu_has_feature(feature: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn loadseg(seg: u16, s: *mut x86seg);
}
extern "C" {
    pub fn loadcs(seg: u16);
}
extern "C" {
    pub fn cpu_current_pc(bufp: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn cpu_update_waitstates();
}
extern "C" {
    pub fn cpu_set();
}
extern "C" {
    pub fn cpu_close();
}
extern "C" {
    pub fn cpu_set_isa_speed(speed: libc::c_int);
}
extern "C" {
    pub fn cpu_set_pci_speed(speed: libc::c_int);
}
extern "C" {
    pub fn cpu_set_isa_pci_div(div: libc::c_int);
}
extern "C" {
    pub fn cpu_set_agp_speed(speed: libc::c_int);
}
extern "C" {
    pub fn cpu_CPUID();
}
extern "C" {
    pub fn cpu_RDMSR();
}
extern "C" {
    pub fn cpu_WRMSR();
}
extern "C" {
    pub fn checkio(port: u32) -> libc::c_int;
}
extern "C" {
    pub fn codegen_block_end();
}
extern "C" {
    pub fn codegen_reset();
}
extern "C" {
    pub fn cpu_set_edx();
}
extern "C" {
    pub fn divl(val: u32) -> libc::c_int;
}
extern "C" {
    pub fn execx86(cycs: libc::c_int);
}
extern "C" {
    pub fn enter_smm(in_hlt: libc::c_int);
}
extern "C" {
    pub fn enter_smm_check(in_hlt: libc::c_int);
}
extern "C" {
    pub fn leave_smm();
}
extern "C" {
    pub fn exec386(cycs: libc::c_int);
}
extern "C" {
    pub fn exec386_dynarec(cycs: libc::c_int);
}
extern "C" {
    pub fn idivl(val: i32) -> libc::c_int;
}
extern "C" {
    pub fn loadcscall(seg: u16);
}
extern "C" {
    pub fn loadcsjmp(seg: u16, old_pc: u32);
}
extern "C" {
    pub fn pmodeint(num: libc::c_int, soft: libc::c_int);
}
extern "C" {
    pub fn pmoderetf(is32: libc::c_int, off: u16);
}
extern "C" {
    pub fn pmodeiret(is32: libc::c_int);
}
extern "C" {
    pub fn resetmcr();
}
extern "C" {
    pub fn resetx86();
}
extern "C" {
    pub fn refreshread();
}
extern "C" {
    pub fn resetreadlookup();
}
extern "C" {
    pub fn softresetx86();
}
extern "C" {
    pub fn hardresetx86();
}
extern "C" {
    pub fn x86_int(num: libc::c_int);
}
extern "C" {
    pub fn x86_int_sw(num: libc::c_int);
}
extern "C" {
    pub fn x86_int_sw_rm(num: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn x86gpf(s: *mut libc::c_char, error: u16);
}
extern "C" {
    pub fn x86np(s: *mut libc::c_char, error: u16);
}
extern "C" {
    pub fn x86ss(s: *mut libc::c_char, error: u16);
}
extern "C" {
    pub fn x86ts(s: *mut libc::c_char, error: u16);
}
extern "C" {
    pub static mut cpu_effective: libc::c_int;
}
extern "C" {
    pub static mut cpu_alt_reset: libc::c_int;
}
extern "C" {
    pub fn cpu_dynamic_switch(new_cpu: libc::c_int);
}
extern "C" {
    pub fn cpu_ven_reset();
}
extern "C" {
    pub fn update_tsc();
}
extern "C" {
    pub fn sysenter(fetchdat: u32) -> libc::c_int;
}
extern "C" {
    pub fn sysexit(fetchdat: u32) -> libc::c_int;
}
extern "C" {
    pub fn syscall_op(fetchdat: u32) -> libc::c_int;
}
extern "C" {
    pub fn sysret(fetchdat: u32) -> libc::c_int;
}
extern "C" {
    pub fn cpu_get_family(internal_name: *const libc::c_char) -> *mut cpu_family_t;
}
extern "C" {
    pub fn cpu_is_eligible(
        cpu_family: *const cpu_family_t,
        cpu: libc::c_int,
        machine: libc::c_int,
    ) -> u8;
}
extern "C" {
    pub fn cpu_family_is_eligible(
        cpu_family: *const cpu_family_t,
        machine: libc::c_int,
    ) -> u8;
}
extern "C" {
    pub fn fpu_get_type(
        cpu_family: *const cpu_family_t,
        cpu: libc::c_int,
        internal_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fpu_get_internal_name(
        cpu_family: *const cpu_family_t,
        cpu: libc::c_int,
        type_: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn fpu_get_name_from_index(
        cpu_family: *const cpu_family_t,
        cpu: libc::c_int,
        c: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn fpu_get_type_from_index(
        cpu_family: *const cpu_family_t,
        cpu: libc::c_int,
        c: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn cyrix_load_seg_descriptor(addr: u32, seg: *mut x86seg);
}
extern "C" {
    pub fn cyrix_write_seg_descriptor(addr: u32, seg: *mut x86seg);
}
#[repr(C)]
pub struct cyrix_t {
    pub arr: [cyrix_t__bindgen_ty_1; 8usize],
    pub smhr: u32,
}
#[repr(C)]
pub struct cyrix_t__bindgen_ty_1 {
    pub base: u32,
    pub size: u64,
}

extern "C" {
    pub static mut addr64: u32;
}
extern "C" {
    pub static mut addr64_2: u32;
}
extern "C" {
    pub static mut addr64a: [u32; 8usize];
}
extern "C" {
    pub static mut addr64a_2: [u32; 8usize];
}
extern "C" {
    pub static mut soft_reset_pci: libc::c_int;
}
extern "C" {
    pub static mut reset_on_hlt: libc::c_int;
}
extern "C" {
    pub static mut hlt_reset_pending: libc::c_int;
}
extern "C" {
    pub static mut cyrix: cyrix_t;
}
extern "C" {
    pub static mut use_custom_nmi_vector: u8;
}
extern "C" {
    pub static mut custom_nmi_vector: u32;
}
extern "C" {
    pub static mut cpu_exec:
        ::std::option::Option<unsafe extern "C" fn(cycs: libc::c_int)>;
}
extern "C" {
    pub static mut do_translate: u8;
}
extern "C" {
    pub static mut do_translate2: u8;
}
extern "C" {
    pub fn reset_808x(hard: libc::c_int);
}
