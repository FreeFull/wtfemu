#![allow(non_camel_case_types, non_snake_case, dead_code)]
/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
pub(crate) struct pic {
    pub(crate) icw1: u8,
    pub(crate) icw2: u8,
    pub(crate) icw3: u8,
    pub(crate) icw4: u8,
    pub(crate) imr: u8,
    pub(crate) isr: u8,
    pub(crate) irr: u8,
    pub(crate) ocw2: u8,
    pub(crate) ocw3: u8,
    pub(crate) int_pending: u8,
    pub(crate) is_master: u8,
    pub(crate) elcr: u8,
    pub(crate) state: u8,
    pub(crate) ack_bytes: u8,
    pub(crate) priority: u8,
    pub(crate) special_mask_mode: u8,
    pub(crate) auto_eoi_rotate: u8,
    pub(crate) interrupt: u8,
    pub(crate) lines: u8,
    pub(crate) data_bus: u8,
    pub(crate) at: u32,
    pub(crate) slaves: [*mut pic; 8usize],
}
pub(crate) type pic_t = pic;
extern "C" {
    pub(crate) static mut pic: pic_t;
}
extern "C" {
    pub(crate) static mut pic2: pic_t;
}
extern "C" {
    pub(crate) fn pic_reset_smi_irq_mask();
}
extern "C" {
    pub(crate) fn pic_set_smi_irq_mask(irq: libc::c_int, set: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_get_smi_irq_status() -> u16;
}
extern "C" {
    pub(crate) fn pic_clear_smi_irq_status(irq: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_elcr_get_enabled() -> libc::c_int;
}
extern "C" {
    pub(crate) fn pic_elcr_set_enabled(enabled: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_elcr_io_handler(set: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_elcr_write(port: u16, val: u8, priv_: *mut libc::c_void);
}
extern "C" {
    pub(crate) fn pic_elcr_read(port: u16, priv_: *mut libc::c_void) -> u8;
}
extern "C" {
    pub(crate) fn pic_set_shadow(sh: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_set_pci_flag(pci: libc::c_int);
}
extern "C" {
    pub(crate) fn pic_set_pci();
}
extern "C" {
    pub(crate) fn pic_init();
}
extern "C" {
    pub(crate) fn pic_init_pcjr();
}
extern "C" {
    pub(crate) fn pic2_init();
}
extern "C" {
    pub(crate) fn pic_reset();
}
extern "C" {
    pub(crate) fn picint_is_level(irq: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub(crate) fn picint_common(num: u16, level: libc::c_int, set: libc::c_int);
}
extern "C" {
    pub(crate) fn picint(num: u16);
}
extern "C" {
    pub(crate) fn picintlevel(num: u16);
}
extern "C" {
    pub(crate) fn picintc(num: u16);
}
extern "C" {
    pub(crate) fn picinterrupt() -> libc::c_int;
}
extern "C" {
    pub(crate) fn pic_irq_ack() -> u8;
}
