#![allow(non_camel_case_types, non_snake_case, dead_code)]
/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
pub(crate) struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub(crate) const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub(crate) unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub(crate) unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}

pub(crate) const PCI_REG_COMMAND: u32 = 4;
pub(crate) const PCI_COMMAND_IO: u32 = 1;
pub(crate) const PCI_COMMAND_MEM: u32 = 2;
pub(crate) const PCI_NO_IRQ_STEERING: u32 = 32768;
pub(crate) const PCI_CAN_SWITCH_TYPE: u32 = 65536;
pub(crate) const PCI_NO_BRIDGES: u32 = 131072;
pub(crate) const PCI_CONFIG_TYPE_1: u32 = 1;
pub(crate) const PCI_CONFIG_TYPE_2: u32 = 2;
pub(crate) const PCI_CONFIG_TYPE_MASK: u32 = 32767;
pub(crate) const PCI_INTA: u8 = 1;
pub(crate) const PCI_INTB: u8 = 2;
pub(crate) const PCI_INTC: u8 = 3;
pub(crate) const PCI_INTD: u8 = 4;
pub(crate) const PCI_MIRQ0: u32 = 0;
pub(crate) const PCI_MIRQ1: u32 = 1;
pub(crate) const PCI_MIRQ2: u32 = 2;
pub(crate) const PCI_MIRQ3: u32 = 3;
pub(crate) const PCI_MIRQ4: u32 = 4;
pub(crate) const PCI_MIRQ5: u32 = 5;
pub(crate) const PCI_MIRQ6: u32 = 6;
pub(crate) const PCI_MIRQ7: u32 = 7;
pub(crate) const PCI_IRQ_DISABLED: i32 = -1;
pub(crate) const PCI_ADD_STRICT: u32 = 128;
pub(crate) const PCI_CARD_NORTHBRIDGE: libc::c_uint = 0;
pub(crate) const PCI_CARD_AGPBRIDGE: libc::c_uint = 1;
pub(crate) const PCI_CARD_SOUTHBRIDGE: libc::c_uint = 2;
pub(crate) const PCI_CARD_AGP: libc::c_uint = 15;
pub(crate) const PCI_CARD_NORMAL: libc::c_uint = 16;
pub(crate) const PCI_CARD_VIDEO: libc::c_uint = 17;
pub(crate) const PCI_CARD_SCSI: libc::c_uint = 18;
pub(crate) const PCI_CARD_SOUND: libc::c_uint = 19;
pub(crate) const PCI_CARD_IDE: libc::c_uint = 20;
pub(crate) const PCI_CARD_NETWORK: libc::c_uint = 21;
pub(crate) const PCI_CARD_BRIDGE: libc::c_uint = 22;
pub(crate) type _bindgen_ty_1 = libc::c_uint;
pub(crate) const PCI_ADD_NORTHBRIDGE: libc::c_uint = 0;
pub(crate) const PCI_ADD_AGPBRIDGE: libc::c_uint = 1;
pub(crate) const PCI_ADD_SOUTHBRIDGE: libc::c_uint = 2;
pub(crate) const PCI_ADD_AGP: libc::c_uint = 15;
pub(crate) const PCI_ADD_NORMAL: libc::c_uint = 16;
pub(crate) const PCI_ADD_VIDEO: libc::c_uint = 17;
pub(crate) const PCI_ADD_SCSI: libc::c_uint = 18;
pub(crate) const PCI_ADD_SOUND: libc::c_uint = 19;
pub(crate) const PCI_ADD_IDE: libc::c_uint = 20;
pub(crate) const PCI_ADD_NETWORK: libc::c_uint = 21;
pub(crate) const PCI_ADD_BRIDGE: libc::c_uint = 22;
pub(crate) type _bindgen_ty_2 = libc::c_uint;
#[repr(C)]
pub(crate) struct bar_t {
    pub(crate) addr: __BindgenUnionField<u32>,
    pub(crate) addr_regs: __BindgenUnionField<[u8; 4usize]>,
    pub(crate) bindgen_union_field: u32,
}
extern "C" {
    pub(crate) static mut pci_burst_time: libc::c_int;
}
extern "C" {
    pub(crate) static mut agp_burst_time: libc::c_int;
}
extern "C" {
    pub(crate) static mut pci_nonburst_time: libc::c_int;
}
extern "C" {
    pub(crate) static mut agp_nonburst_time: libc::c_int;
}
extern "C" {
    pub(crate) fn pci_set_irq_routing(pci_int: libc::c_int, irq: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_set_irq_level(pci_int: libc::c_int, level: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_enable_mirq(mirq: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_set_mirq_routing(mirq: libc::c_int, irq: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_irq_is_level(irq: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub(crate) fn pci_set_mirq(mirq: u8, level: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_set_irq(card: u8, pci_int: u8);
}
extern "C" {
    pub(crate) fn pci_clear_mirq(mirq: u8, level: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_clear_irq(card: u8, pci_int: u8);
}
extern "C" {
    pub(crate) fn pci_get_int(card: u8, pci_int: u8) -> u8;
}
extern "C" {
    pub(crate) fn pci_reset();
}
extern "C" {
    pub(crate) fn pci_init(type_: libc::c_int);
}
extern "C" {
    pub(crate) fn pci_register_bus() -> u8;
}
extern "C" {
    pub(crate) fn pci_set_pmc(pmc: u8);
}
extern "C" {
    pub(crate) fn pci_remap_bus(bus_index: u8, bus_number: u8);
}
extern "C" {
    pub(crate) fn pci_register_slot(
        card: libc::c_int,
        type_: libc::c_int,
        inta: libc::c_int,
        intb: libc::c_int,
        intc: libc::c_int,
        intd: libc::c_int,
    );
}
extern "C" {
    pub(crate) fn pci_register_bus_slot(
        bus: libc::c_int,
        card: libc::c_int,
        type_: libc::c_int,
        inta: libc::c_int,
        intb: libc::c_int,
        intc: libc::c_int,
        intd: libc::c_int,
    );
}
extern "C" {
    pub(crate) fn pci_close();
}
extern "C" {
    pub(crate) fn pci_add_card(
        add_type: u8,
        read: ::std::option::Option<
            unsafe extern "C" fn(
                func: libc::c_int,
                addr: libc::c_int,
                priv_: *mut libc::c_void,
            ) -> u8,
        >,
        write: ::std::option::Option<
            unsafe extern "C" fn(
                func: libc::c_int,
                addr: libc::c_int,
                val: u8,
                priv_: *mut libc::c_void,
            ),
        >,
        priv_: *mut libc::c_void,
    ) -> u8;
}
extern "C" {
    pub(crate) fn trc_init();
}
extern "C" {
    pub(crate) fn trc_read(port: u16, priv_: *mut libc::c_void) -> u8;
}
extern "C" {
    pub(crate) fn trc_write(port: u16, val: u8, priv_: *mut libc::c_void);
}
extern "C" {
    pub(crate) fn pci_bridge_set_ctl(priv_: *mut libc::c_void, ctl: u8);
}
extern "C" {
    pub(crate) fn pci_pic_reset();
}
